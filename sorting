#include <bits/stdc++.h>
using namespace std;

void selection_sort(vector<int>&vec,int n)
{
    for(int i = 0; i < n-1; i++)
    {
        int index_mini = i;
        for(int j = i+1; j < n; j++)
        {
            if(vec[j] < vec[index_mini])
            {
                index_mini = j;
            }
        }
        if(index_mini != i)
        {
            swap(vec[i],vec[index_mini]);
        }
    }
}

void bubble_sort(vector<int>&vec,int n)
{
    for(int i = 0; i < n-1; i++)
    {
        for(int j = i+1; j < n; j++)
        {
            if(vec[i] > vec[j])
            {
                swap(vec[i],vec[j]);
            }
        }
    }
}

void insertion_sort(vector<int>&vec,int n)
{
    int key,j;
    for(int i = 1; i < n; i++)
    {
        key = vec[i];
        j = i - 1;
        while(j >= 0 && vec[j] > key)
        {
            swap(vec[j+1],vec[j]);
            j = j - 1;
        }
        vec[j+1] = key;
    }
}

void merge_subarrays(vector<int>&vec,int L,int R)
{
    vector<int>temp_array;
    int M = (L+R)/2;
    int leftP = L, rightP = M + 1;
    while(leftP <= M && rightP <= R)
    {
        if(vec[leftP] <= vec[rightP])
        {
            temp_array.push_back(vec[leftP]);
            leftP++;
        }
        else
        {
            temp_array.push_back(vec[rightP]);
            rightP++;
        }
    }
    while(leftP <= M)
    {
        temp_array.push_back(vec[leftP]);
        leftP++;
    }

    while(rightP <= R)
    {
        temp_array.push_back(vec[rightP]);
        rightP++;
    }
    for(int i = L; i <= R; i++)
    {
        vec[i] = temp_array[i-L];
    }
}

void merge_sort(vector<int>&vec,int L,int R)
{
    if(L >= R) return;
    int M = (L + R)/2;
    merge_sort(vec,L,M);
    merge_sort(vec,M+1,R);
    merge_subarrays(vec,L,R);
}


void print_vec(vector<int>&vec,int n)
{
    for(int i = 0; i < n; i++)
    {
        cout << vec[i]  << "  ";
    }
}

int main()
{
    vector<int> vec = {10,7,5,8};
    int n = vec.size();
    selection_sort(vec,n);
    cout << "using selection sort : ";
    print_vec(vec,n);
    bubble_sort(vec,n);
    cout << endl << "using bubble sort : ";
    print_vec(vec,n);
    insertion_sort(vec,n);
    cout << endl << "using insertion sort : ";
    print_vec(vec,n);
    merge_sort(vec,0,n-1);
    cout << endl << "using merge sort : ";
    print_vec(vec,n);

    return 0;

}
