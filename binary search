..............................................................................................................................
\\ does exist

#include<bits/stdc++.h>
using namespace std;

bool does_exist(vector<int>&vec, int value)
{
    int L = 0;
    int R = vec.size() - 1;
    while(L <= R)
    {
        int M = L + (R-L) / 2;
        if(vec[M] == value)
        {
            return true;
        }
        if(vec[M] < value)
        {
            L = M + 1;
        }
        else
        {
            R = M -1;
        }
    }
    return false;
}

int main()
{
    vector<int> vec = {1,2,3,4,5,6,7,8,9};
    for(auto v : {2,3,12,15})
    cout << does_exist(vec, v) << "\n";
    return 0;
}

..................................................................................................................................................

\\count first even number

#include<bits/stdc++.h>
using namespace std;
int count_first_even_numbers(vector<int>&vec)
{
    int L = 0, R = vec.size();
    while(L < R)
    {
        int M = L + (R - L) / 2;
        if(vec[M] % 2 == 0)
        {
            L = M + 1;
        }
        else
        {
            R = M;
        }
    }
    return L;

}
int main()
{
    vector<int> vec = {6,10,2,100,4,4,2,6,3,1,3,1,9};
    cout << count_first_even_numbers(vec) << "\n";
    return 0;
}

.................................................................................................................................................................

\\find sqrt


#include<bits/stdc++.h>
using namespace std;

double get_sqrt(double n)
{
    double L = 0, R = max(1.0,n), M;
    while(fabs(L - R) > 1e-6)
    {
        M = L + (R-L) / 2.0;
        if(M * M > n)
        {
            R = M;
        }
        else
        {
            L = M;
        }
    }
    return M;

}

int main()
{
    double n;
    cin >> n;
    cout  << get_sqrt(n);
    return 0;
}


...................................................................................................................................................................


\\ lower bound

#include<bits/stdc++.h>
using namespace std;
int get_lower_bound(vector<int>&vec, int n)
{
    int L = 0, R = vec.size();
    while(L < R)
    {
        int M = L + (R - L) / 2;
        if(vec[M] >= n)
        {
            R = M;
        }
        else
        {
            L = M + 1;
        }
    }
    return L;
}
int main()
{
    vector<int> vec = {1,2,2,4,7,11,11,13};
    int value;
    cin >> value;
    cout  << get_lower_bound(vec,value);     \\ (value +1) == upper bound
    return 0;
}


..........................................................................................................................................
 
 \\ upper bound
 
 
 #include<bits/stdc++.h>
using namespace std;
int get_lower_bound(vector<int>&vec, int n)
{
    int L = 0, R = vec.size();
    while(L < R)
    {
        int M = L + (R - L) / 2;
        if(vec[M] > n)
        {
            R = M;
        }
        else
        {
            L = M + 1;
        }
    }
    return L;
}
int main()
{
    vector<int> vec = {1,2,2,4,7,11,11,13};
    int value;
    cin >> value;
    cout  << get_lower_bound(vec,value);   
    return 0;
}



.......................................................................................................................................................



